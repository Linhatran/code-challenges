import React, { useState } from 'react';
import ReactDOM from 'react-dom';

const rowStyle = {
  display: 'flex'
}

const squareStyle = {
  'width':'60px',
  'height':'60px',
  'backgroundColor': '#ddd',
  'margin': '4px',
  'display': 'flex',
  'justifyContent': 'center',
  'alignItems': 'center',
  'fontSize': '20px',
  'color': 'white'
}

const boardStyle = {
  'backgroundColor': '#eee',
  'width': '208px',
  'alignItems': 'center',
  'justifyContent': 'center',
  'display': 'flex',
  'flexDirection': 'column',
  'border': '3px #eee solid'
}

const containerStyle = {
  'display': 'flex',
  'alignItems': 'center',
  'flexDirection': 'column'
}

const instructionsStyle = {
  'marginTop': '5px',
  'marginBottom': '5px',
  'fontWeight': 'bold',
  'fontSize': '16px',
}

const buttonStyle = {
  'marginTop': '15px',
  'marginBottom': '16px',
  'width': '120px',
  'height': '40px',
  'backgroundColor': '#8acaca',
  'color': 'white',
  'fontSize': '16px',
}

const Square = (props) => {
    return (
      <div
        className="square"
        style={squareStyle}
        onClick={() => {
          props.updateTurnAndCheckWinner();
        }}>
        {props.value}
      </div>
    );
  }

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      board : ['','','',
               '','','',
               '','',''],
      turn : 'X', 
      isWinner:false
    }
    this.updateTurnAndCheckWinner = this.updateTurnAndCheckWinner.bind(this);
    this.reset = this.reset.bind(this);
  }
  updateTurnAndCheckWinner (index) {
    // make a copy of board array from state
    const board = this.state.board.slice();
    // check if the box at index is empty or not
      // if box is empty, begin with 'X' then alternate turn
    if (board[index] === '') {
      this.state.turn === 'X' ? this.setState({board, turn: 'O'}) : this.setState({board, turn: 'X'})
      // update empty box with 'X' or 'O' depends on the value of 'turn' property in state
      board[index] = this.state.turn;
      // create an array of winning possibilities with rows, columns, and diagonals
      const combinations = [board[0]+board[1]+board[2], 
                            board[3]+board[4]+board[5],
                            board[6]+board[7]+board[8],
                            board[0]+board[3]+board[6],
                            board[1]+board[4]+board[7],
                            board[2]+board[5]+board[8],
                            board[0]+board[4]+board[8],
                            board[2]+board[4]+board[6]]
    // declare result to be a boolean to check whether a row/colum/diagonal has a winning combination of 'XXX' or 'OOO'
    const result = !combinations.every(com => com !== 'XXX' && com !== 'OOO')
    if (result) this.setState({isWinner:true})
    } else return; // if the box is already marked, do not overwrite 
  } 
  reset () { // erase all square by setting all to be empty strings, switch turn back to 'X', winner is none
    this.setState({board:['','','',
                          '','','',
                          '','',''],
                  turn:'X', 
                  isWinner:false})
  }
  render() {
    return (
      <div style={containerStyle} className="gameBoard">
        <div className="status" style={instructionsStyle}>Next player: {this.state.turn}</div>
        <div className="winner" style={instructionsStyle}>Winner: {this.state.isWinner ? 'We have a winner!' : null}</div> // display 'We have a winner' if there is a winner, if not, do not display any message
        <button style={buttonStyle} onClick={this.reset}>{this.state.isWinner ? 'Play again' : 'Reset'}</button> // if the game ended, button prompts to play again
        <div style={boardStyle}>
          <div className="board-row" style={rowStyle}>
            <Square value={this.state.board[0]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(0)} />
            <Square value={this.state.board[1]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(1)} />
            <Square value={this.state.board[2]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(2)} />
          </div>
          <div className="board-row" style={rowStyle}>
            <Square value={this.state.board[3]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(3)} />
            <Square value={this.state.board[4]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(4)} />
            <Square value={this.state.board[5]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(5)} />
          </div>
          <div className="board-row" style={rowStyle}>
            <Square value={this.state.board[6]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(6)} />
            <Square value={this.state.board[7]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(7)} />
            <Square value={this.state.board[8]} updateTurnAndCheckWinner={()=> this.updateTurnAndCheckWinner(8)} />
          </div>
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  render() {
    return (
      <div className="game">
        <div className="game-board">
          <Board />
        </div>
      </div>
    );
  }
}

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);
